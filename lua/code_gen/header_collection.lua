-- SPDX-License-Identifier: GPL-3.0-only

local argparse = require "argparse"
local glue = require "glue"

local parser = argparse("Balltze C++ header collection generator", "Generates a C++ header which includes all given header files.")
parser:argument("output", "Output file"):args(1)
parser:argument("files", "Header files"):args("*")
parser:option("-g --include-guard", "Add include guard to the header", false):args(1)

local args = parser:parse()
local outputFile = args.output
local files = args.files

local headerFileName = outputFile:match("([^/]+)$")
local includeGuard = "BALLTZE__ENGINE__TAG_DEFINITIONS__" .. headerFileName:upper():gsub("[^A-Z0-9_]", "_")

local header = [[
// SPDX-License-Identifier: GPL-3.0-only
// This file is automatically generated by generate_header_collection.lua. Do not edit!

]]

if(args.guard) then
    header = header .. [[ 
#ifndef ]] .. includeGuard .. [[ 
#define ]] .. includeGuard .. [[ 

]]
end

for _, file in ipairs(files) do
    local fileName = file:match("([^/]+)$")
    header = header .. "#include \"" .. fileName .. "\"\n"
end

if(args.guard) then
    header = header .. [[ 
#endif 
]]
end

glue.writefile(outputFile, header, "t")
